/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keyposdef.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs
#define COMBO_TERM 30;

/ {
    macros {
        quote: quote {
            compatible = "zmk,behavior-macro";
            label = "QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SPACE>;
        };

        double_quote: double_quote {
            compatible = "zmk,behavior-macro";
            label = "DOUBLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp SPACE>;
        };

        e_aigue: e_aigue {
            compatible = "zmk,behavior-macro";
            label = "E_AIGUE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp E>;
        };

        e_grave: e_grave {
            compatible = "zmk,behavior-macro";
            label = "E_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp E>;
        };

        e_circ: e_circ {
            compatible = "zmk,behavior-macro";
            label = "E_CIRC";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp E>;
        };

        e_trema: e_trema {
            compatible = "zmk,behavior-macro";
            label = "E_TREMA";
            #binding-cells = <0>;
            bindings = <&kp LS(SINGLE_QUOTE) &kp E>;
        };

        e_maj_aigue: e_maj_aigue {
            compatible = "zmk,behavior-macro";
            label = "E_MAJ_AIGUE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp LS(E)>;
        };

        e_maj_grave: e_maj_grave {
            compatible = "zmk,behavior-macro";
            label = "E_MAJ_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(E)>;
        };

        e_maj_circ: e_maj_circ {
            compatible = "zmk,behavior-macro";
            label = "E_MAJ_CIRC";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp LS(E)>;
        };

        e_maj_trema: e_maj_trema {
            compatible = "zmk,behavior-macro";
            label = "E_MAJ_TREMA";
            #binding-cells = <0>;
            bindings = <&kp LS(SINGLE_QUOTE) &kp LS(E)>;
        };

        a_grave: a_grave {
            compatible = "zmk,behavior-macro";
            label = "A_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp A>;
        };

        a_maj_grave: a_ma_grave {
            compatible = "zmk,behavior-macro";
            label = "A_MAJ_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(A)>;
        };

        grave: grave {
            compatible = "zmk,behavior-macro";
            label = "GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
        };

        caret: caret {
            compatible = "zmk,behavior-macro";
            label = "CARET";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
        };

        c_cedille: c_cedille {
            compatible = "zmk,behavior-macro";
            label = "C_CEDILLE";
            #binding-cells = <0>;
            bindings = <&kp RG(C)>;
        };

        tilde: tilde {
            compatible = "zmk,behavior-macro";
            label = "TILDE";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            label = "ARROW";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;// repeat on tap-into-hold
            global-quick-tap;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;// delay positional check until key-release
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;// repeat on tap-into-hold
            global-quick-tap;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;// delay positional check until key-release
        };

        hml_shift: hml_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_SHIFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;// repeat on tap-into-hold
            global-quick-tap;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;// delay positional check until key-release
        };

        hmr_shift: hmr_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_SHIFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;// repeat on tap-into-hold
            global-quick-tap;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;// delay positional check until key-release
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <31 32 33>;
            timeout-ms = <30>;
            layers = <0 1 5 2 3>;
        };

        shift_enter {
            bindings = <&kp LS(ENTER)>;
            key-positions = <31 32 33>;
            timeout-ms = <30>;
            layers = <4>;
        };

        e_grave {
            bindings = <&e_grave>;
            key-positions = <19 20>;
            timeout-ms = <30>;
            layers = <0>;
        };

        e_maj_grave {
            bindings = <&e_maj_grave>;
            key-positions = <19 20>;
            timeout-ms = <30>;
            layers = <4>;
        };

        e_aigue {
            bindings = <&e_aigue>;
            key-positions = <20 21>;
            timeout-ms = <30>;
            layers = <0>;
        };

        e_maj_aigue {
            bindings = <&e_maj_aigue>;
            key-positions = <20 21>;
            timeout-ms = <30>;
            layers = <4>;
        };

        a_grave {
            bindings = <&a_grave>;
            key-positions = <13 14>;
            timeout-ms = <25>;
            layers = <0>;
        };

        a_maj_grave {
            bindings = <&a_maj_grave>;
            key-positions = <13 14>;
            timeout-ms = <25>;
            layers = <4>;
        };

        ctrl_alt_sup {
            bindings = <&kp LC(LA(DEL))>;
            key-positions = <9 10 11>;
            timeout-ms = <30>;
            slow-release;
            layers = <0>;
        };

        c_cedille {
            bindings = <&kp RA(COMMA)>;
            key-positions = <27 26>;
            timeout-ms = <30>;
            layers = <0>;
        };

        c_maj_cedille {
            bindings = <&kp RA(LS(COMMA))>;
            key-positions = <27 26>;
            timeout-ms = <30>;
            layers = <4>;
        };

        combo_underscore {
            bindings = <&kp UNDER>;
            key-positions = <32 33>;
            timeout-ms = <30>;
            layers = <0 4 2 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <31 32>;
            timeout-ms = <30>;
            layers = <0 1 2 3 5>;
        };

        dead_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <8 9>;
            timeout-ms = <30>;
            layers = <0 4>;
        };

        dead_grave {
            bindings = <&kp GRAVE>;
            key-positions = <7 8>;
            layers = <0 4>;
            timeout-ms = <30>;
        };

        dead_caret {
            bindings = <&kp CARET>;
            key-positions = <2 3>;
            timeout-ms = <30>;
            layers = <0 4>;
        };

        dead_trema {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <3 4>;
            timeout-ms = <30>;
            layers = <0 4>;
        };

        function {
            bindings = <&mo 5>;
            key-positions = <37 40>;
            layers = <0>;
        };

        space_symbol {
            bindings = <&kp SPACE>;
            key-positions = <20 21>;
            timeout-ms = <30>;
            layers = <1>;
        };

        space_symbol_2 {
            bindings = <&kp SPACE>;
            key-positions = <15 14>;
            layers = <1>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <31 32>;
            layers = <4>;
            timeout-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE      &kp Q            &kp W            &kp F           &kp P         &kp B               &kp J        &kp L          &kp U           &kp Y            &kp MINUS         &trans
&kp LEFT_SHIFT  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml_shift 4 S  &hml LCTRL T  &hml RIGHT_ALT G    &hmr RALT M  &hmr RCTRL N   &hmr_shift 4 E  &hmr LEFT_ALT I  &hmr RIGHT_GUI O  &quote
&caps_word      &kp Z            &kp X            &kp C           &kp D         &kp V               &kp K        &kp H          &kp COMMA       &kp DOT          &kp FSLH          &kp EXCLAMATION
                                                  &mo 4           &lt 1 SPACE   &lt 2 ESCAPE        &mo 3        &kp BACKSPACE  &kp DELETE
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &quote    &kp LESS_THAN  &kp GREATER_THAN  &double_quote  &grave      &kp UNDER  &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PRCNT     &trans
&trans  &kp EXCL  &kp MINUS      &kp PLUS          &kp EQUAL      &kp HASH    &kp PIPE   &kp COLON      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI      &trans
&trans  &caret    &kp FSLH       &kp STAR          &kp BSLH       &kp AT      &tilde     &kp DLLR       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp QUESTION  &trans
                                 &trans            &trans         &trans      &trans     &trans         &trans
            >;
        };

        Numbers {
            bindings = <
&trans  &trans    &trans    &kp DOT     &kp COMMA  &trans      &trans  &kp N7        &kp N8        &kp N9  &trans        &trans
&trans  &kp LGUI  &kp LALT  &kp LSHIFT  &sk LCTRL  &kp RALT    &trans  &kp N4        &kp N5        &kp N6  &kp NUMBER_0  &trans
&trans  &trans    &trans    &kp SPACE   &trans     &trans      &trans  &kp NUMBER_1  &kp N2        &kp N3  &trans        &trans
                            &trans      &trans     &trans      &trans  &trans        &kp NUMBER_0
            >;
        };

        Navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans    &trans    &trans      &trans     &trans      &kp H     &kp J          &kp K      &kp L      &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LSHIFT  &sk LCTRL  &sk RALT    &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT  &trans  &trans
&trans  &trans    &trans    &trans      &trans     &trans      &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp END    &trans  &trans
                            &trans      &trans     &trans      &trans    &trans         &trans
            >;
        };

        Shift {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &kp LS(Q)            &kp LS(W)            &kp LS(F)  &kp LS(P)         &kp LS(B)    &kp LS(J)      &kp LS(L)         &kp LS(U)  &kp LS(Y)             &trans                &trans
&trans  &hml LEFT_GUI LS(A)  &hml LEFT_ALT LS(R)  &kp LS(S)  &hml LCTRL LS(T)  &kp LS(G)    &kp LS(M)      &hmr RCTRL LS(N)  &kp LS(E)  &hmr RIGHT_ALT LS(I)  &hmr RIGHT_GUI LS(O)  &double_quote
&trans  &kp LS(Z)            &kp LS(X)            &kp LS(C)  &kp LS(D)         &kp LS(V)    &kp LS(K)      &kp LS(H)         &kp SEMI   &kp COLON             &kp LS(FSLH)          &trans
                                                  &trans     &trans            &trans       &kp LS(ENTER)  &trans            &trans
            >;
        };

        Function {
            bindings = <
&trans      &trans        &trans        &kp PRINTSCREEN  &trans        &trans          &kp C_VOLUME_UP    &kp F7  &kp F8  &kp F9  &kp F12  &trans
&trans      &trans        &trans        &kp LSHIFT       &trans        &trans          &kp C_MUTE         &kp F4  &kp F5  &kp F6  &kp F11  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOLUME_DOWN  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                        &trans           &trans        &trans          &trans             &trans  &trans
            >;
        };
    };
};
