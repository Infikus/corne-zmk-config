/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keyposdef.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

/ {
    macros {
        quote: quote {
            compatible = "zmk,behavior-macro";
            label = "QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SPACE>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;// repeat on tap-into-hold
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;// delay positional check until key-release
        };
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;// repeat on tap-into-hold
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;// delay positional check until key-release
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp LEFT_PARENTHESIS            &kp Q            &kp W              &kp F         &kp P        &kp B      &kp J          &kp L               &kp U             &kp Y  &kp SINGLE_QUOTE        &kp MINUS
      &kp LEFT_BRACE  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LEFT_SHIFT S  &hml LCTRL T        &kp G      &kp M   &hmr RCTRL N  &hmr RIGHT_SHIFT E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI O    &kp SEMICOLON
           &kp EQUAL            &kp Z            &kp X              &kp C         &kp D        &kp V      &kp K          &kp H           &kp COMMA           &kp DOT          &kp FSLH  &kp EXCLAMATION
                                                           &kp LEFT_SHIFT     &lt 2 TAB  &lt 1 SPACE    &kp RET  &kp BACKSPACE           &lt 3 DEL
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE             &trans     &trans     &trans            &trans  &trans      &kp CARET       &kp AMPS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR   &kp PIPE
    &trans  &kp DOUBLE_QUOTES  &kp CARET  &kp GRAVE  &kp SINGLE_QUOTE  &trans         &kp AT  &kp AMPERSAND              &kp LBKT               &kp RBKT    &kp BSLH  &kp GRAVE
    &trans             &trans     &trans     &trans            &trans  &trans    &kp PERCENT         &kp LT              &kp LBRC               &kp RBRC      &kp GT  &kp TILDE
                                             &trans            &trans  &trans         &trans         &trans                &trans
            >;
        };

        Numbers {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3     &kp N4  &kp N5       &kp N6        &kp N7  &kp N8  &kp N9     &kp N0  &trans
&trans  &trans  &trans  &trans  &kp EQUAL  &trans     &kp STAR        &kp N4  &kp N5  &kp N6  &kp MINUS  &trans
&trans  &trans  &trans  &trans     &trans  &trans    &kp SLASH  &kp NUMBER_1  &kp N2  &kp N3   &kp PLUS  &trans
                        &trans     &trans  &trans       &trans        &trans  &trans
            >;
        };

        Navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
   &kp TAB        &kp N1             &kp N2        &kp N3           &kp N4        &kp N5      &kp N6    &kp N7  &kp N8     &kp N9  &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0       &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans    &trans
 &kp LSHFT        &trans  &kp C_VOLUME_DOWN    &kp K_MUTE  &kp C_VOLUME_UP        &trans      &trans    &trans  &trans     &trans  &trans    &trans
                                                   &trans           &trans        &trans      &trans    &trans  &trans
            >;
        };
    };
};
