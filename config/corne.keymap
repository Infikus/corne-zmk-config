/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keyposdef.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs
#define COMBO_TERM 30;

/ {
    macros {
        quote: quote {
            compatible = "zmk,behavior-macro";
            label = "QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SPACE>;
        };
        double_quote: double_quote {
            compatible = "zmk,behavior-macro";
            label = "DOUBLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp SPACE>;
        };
        e_aigue: e_aigue {
            compatible = "zmk,behavior-macro";
            label = "E_AIGUE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp E>;
        };
        e_grave: e_grave {
            compatible = "zmk,behavior-macro";
            label = "E_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp E>;
        };
        e_circ: e_circ {
            compatible = "zmk,behavior-macro";
            label = "E_CIRC";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp E>;
        };
        e_trema: e_trema {
            compatible = "zmk,behavior-macro";
            label = "E_TREMA";
            #binding-cells = <0>;
            bindings = <&kp LS(SINGLE_QUOTE) &kp E>;
        };
        e_maj_aigue: e_maj_aigue {
            compatible = "zmk,behavior-macro";
            label = "E_MAJ_AIGUE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp LS(E)>;
        };
        e_maj_grave: e_maj_grave {
            compatible = "zmk,behavior-macro";
            label = "E_MAJ_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(E)>;
        };
        e_maj_circ: e_maj_circ {
            compatible = "zmk,behavior-macro";
            label = "E_MAJ_CIRC";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp LS(E)>;
        };
        e_maj_trema: e_maj_trema {
            compatible = "zmk,behavior-macro";
            label = "E_MAJ_TREMA";
            #binding-cells = <0>;
            bindings = <&kp LS(SINGLE_QUOTE) &kp LS(E)>;
        };
        a_grave: a_grave {
            compatible = "zmk,behavior-macro";
            label = "A_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp A>;
        };
        a_maj_grave: a_ma_grave {
            compatible = "zmk,behavior-macro";
            label = "A_MAJ_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(A)>;
        };
        grave: grave {
            compatible = "zmk,behavior-macro";
            label = "GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
        };
        caret: caret {
            compatible = "zmk,behavior-macro";
            label = "CARET";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
        };
        c_cedille: c_cedille {
            compatible = "zmk,behavior-macro";
            label = "C_CEDILLE";
            #binding-cells = <0>;
            bindings = <&kp RG(C)>;
        };
        tilde: tilde {
            compatible = "zmk,behavior-macro";
            label = "TILDE";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;// repeat on tap-into-hold
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;// delay positional check until key-release
        };
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;// repeat on tap-into-hold
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;// delay positional check until key-release
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        e_grave {
            bindings = <&e_grave>;
            key-positions = <19 20>;
            timeout-ms = <30>;
            layers = <0>;
        };

        e_maj_grave {
            bindings = <&e_maj_grave>;
            key-positions = <19 20>;
            timeout-ms = <30>;
            layers = <4>;
        };

        e_aigue {
            bindings = <&kp RA(E)>;
            key-positions = <20 21>;
            timeout-ms = <30>;
            layers = <0>;
        };

        e_maj_aigue {
            bindings = <&kp RA(LS(E))>;
            key-positions = <20 21>;
            timeout-ms = <30>;
            layers = <4>;
        };

        a_grave {
            bindings = <&a_grave>;
            key-positions = <13 14>;
            timeout-ms = <25>;
            layers = <0>;
        };

        a_maj_grave {
            bindings = <&a_maj_grave>;
            key-positions = <13 14>;
            timeout-ms = <25>;
            layers = <4>;
        };

        ctrl_alt_sup {
            bindings = <&kp LC(LA(DEL))>;
            key-positions = <9 10 11>;
            timeout-ms = <30>;
            slow-release;
        };

        e_circ {
            bindings = <&e_circ>;
            key-positions = <8 20>;
            timeout-ms = <30>;
            layers = <0>;
        };

        e_maj_circ {
            bindings = <&e_maj_circ>;
            key-positions = <8 20>;
            timeout-ms = <30>;
            layers = <4>;
        };

        e_trema {
            bindings = <&e_trema>;
            key-positions = <20 32>;
            timeout-ms = <30>;
            layers = <0>;
        };

        e_maj_trema {
            bindings = <&e_maj_trema>;
            key-positions = <20 32>;
            timeout-ms = <30>;
            layers = <4>;
        };

        c_cedille {
            bindings = <&kp RA(COMMA)>;
            key-positions = <27 26>;
            timeout-ms = <30>;
            layers = <0>;
        };

        c_maj_cedille {
            bindings = <&kp RA(LS(COMMA))>;
            key-positions = <27 26>;
            timeout-ms = <30>;
            layers = <4>;
        };

        combo_underscore {
            bindings = <&kp UNDER>;
            key-positions = <32 33>;
            timeout-ms = <30>;
            layers = <0 4>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <3 4>;
            timeout-ms = <30>;
            layers = <0 4 1 2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&caps_word            &kp Q            &kp W              &kp F         &kp P      &kp B      &kp J          &kp L               &kp U             &kp Y            &quote        &kp MINUS
 &kp COLON  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LEFT_SHIFT S  &hml LCTRL T      &kp G      &kp M   &hmr RCTRL N  &hmr RIGHT_SHIFT E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI O    &kp SEMICOLON
 &kp EQUAL            &kp Z            &kp X              &kp C         &kp D      &kp V      &kp K          &kp H           &kp COMMA           &kp DOT          &kp FSLH  &kp EXCLAMATION
                                                          &mo 4   &lt 1 SPACE  &lt 2 TAB    &kp RET  &kp BACKSPACE           &lt 3 DEL
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp DOUBLE_QUOTES  &kp CARET  &kp GRAVE  &kp SINGLE_QUOTE         &quote         &caret      &kp EQUAL        &kp LEFT_BRACE        &kp RIGHT_BRACE  &kp BACKSLASH  &kp PIPE
    &trans             &trans     &trans     &trans            &trans  &double_quote         &kp AT  &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS     &kp DOLLAR    &grave
    &trans             &trans     &trans  &kp SPACE     &kp SEMICOLON      &kp COLON    &kp PERCENT         &kp LT      &kp LEFT_BRACKET      &kp RIGHT_BRACKET         &kp GT    &tilde
                                             &trans            &trans         &trans         &trans         &trans                &trans
            >;
        };

        Numbers {
            bindings = <
&kp ESCAPE  &kp N1         &kp N2                 &kp N3                   &kp N4  &kp N5       &kp N6        &kp N7        &kp N8  &kp N9     &kp N0  &trans
    &trans  &trans  &hml LALT DOT  &hml LEFT_SHIFT COMMA  &hml LEFT_CONTROL EQUAL  &trans     &kp STAR        &kp N4        &kp N5  &kp N6  &kp MINUS  &trans
    &trans  &trans         &trans              &kp SPACE                   &trans  &trans    &kp SLASH  &kp NUMBER_1        &kp N2  &kp N3   &kp PLUS  &trans
                                                  &trans                   &trans  &trans       &trans        &trans  &kp NUMBER_0
            >;
        };

        Navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE        &trans             &trans        &trans           &trans        &trans       &kp H     &kp J   &kp K      &kp L  &trans  &trans
    &trans        &trans  &kp C_VOLUME_DOWN    &kp K_MUTE  &kp C_VOLUME_UP        &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0       &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4      &trans    &trans  &trans     &trans  &trans  &trans
                                                   &trans           &trans        &trans      &trans    &trans  &trans
            >;
        };

        Shift {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
    &caps_word            &kp LS(Q)            &kp LS(W)              &kp LS(F)         &kp LS(P)  &kp LS(B)    &kp LS(J)         &kp LS(L)               &kp LS(U)             &kp LS(Y)         &double_quote      &kp LS(MINUS)
&kp LEFT_BRACE  &hml LEFT_GUI LS(A)  &hml LEFT_ALT LS(R)  &hml LEFT_SHIFT LS(S)  &hml LCTRL LS(T)  &kp LS(G)    &kp LS(M)  &hmr RCTRL LS(N)  &hmr RIGHT_SHIFT LS(E)  &hmr RIGHT_ALT LS(I)  &hmr RIGHT_GUI LS(O)  &kp LS(SEMICOLON)
     &kp EQUAL            &kp LS(Z)            &kp LS(X)              &kp LS(C)         &kp LS(D)  &kp LS(V)    &kp LS(K)         &kp LS(H)           &kp LS(COMMA)           &kp LS(DOT)          &kp LS(FSLH)    &kp EXCLAMATION
                                                                 &kp LEFT_SHIFT       &lt 1 SPACE  &lt 2 TAB      &kp RET     &kp BACKSPACE               &lt 3 DEL
            >;
        };
    };
};
